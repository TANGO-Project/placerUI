package placer.design;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class ActionOnComputeur {
	
	private void CopyFile(File Source, File Destination){
	    FileInputStream filesource=null;
	    FileOutputStream fileDestination=null;
	    try{
	        filesource=new FileInputStream(Source);
	        fileDestination=new FileOutputStream(Destination);
	        byte buffer[]=new byte[512*1024];
	        int nblecture;
	        while((nblecture=filesource.read(buffer))!=-1){
	            fileDestination.write(buffer,0,nblecture);
	            System.out.println(fileDestination.getChannel());
	        }
	    }
	    catch(FileNotFoundException nf){
	    	System.out.println("error CopyFile");
	        nf.printStackTrace();
	    }
	    catch(IOException io){
	    	System.out.println("error CopyFile");
	        io.printStackTrace();
	    }
	    finally{
	        try{
	            filesource.close();
	        }
	        catch(Exception e){
	        	System.out.println("error source CopyFile");
	            e.printStackTrace();
	        }
	        try{
	            fileDestination.close();
	        }
	        catch(Exception e){
	        	System.out.println("error destination CopyFile");
	            e.printStackTrace();
	        }
	    }
	}
	
	protected void actionOnComputeur(StringBuilder json) {
		final String cheminJson = "C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community\\runtime1\\placer.json";
	    final String directoryPathSource = "C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community\\runtime1\\placerSample";
	    SimpleDateFormat date = new SimpleDateFormat("YYYY.MM.dd-kk.mm.ss");
	    String dateFolder = date.format(System.currentTimeMillis());
	    //final String newFolderString = "C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community\\sauvegardeRuntimePlacerSample\\sauvegarde-"+dateFolder;
	   
	    final String b2 = "C:\\Users\\Utilisateur\\Desktop\\Nouveau2\\sauvegarde-"+dateFolder;
	    
		final File fileJson =new File(cheminJson); 
	    try {
	        fileJson.createNewFile();
	        final FileWriter writer = new FileWriter(fileJson);
	        try {
	            writer.write(json.toString());
	        } finally {
	            writer.close();
	        }
	    } 
	    catch (Exception e) {
	        System.out.println("Impossible de creer le fichier");
	    }

		/*File directoryDestination = new File(newFolderString);
        directoryDestination.mkdir();
        
		List<String> saveName = new ArrayList<String>();
		File directorySource = new File(directoryPathSource); 
		if(!directorySource.exists()){
			System.out.println("Le fichier/répertoire '"+directoryPathSource+"' n'existe pas"); 
		}
		else if(!directorySource.isDirectory()){ 
			System.out.println("Le chemin '"+directoryPathSource+"' correspond à un fichier et non à un répertoire"); 
		} 
		if(!directoryDestination.exists()){
			System.out.println("Le fichier/répertoire '"+newFolderString+"' n'existe pas"); 
		}
		else if(!directoryDestination.isDirectory()){ 
			System.out.println("Le chemin '"+newFolderString+"' correspond à un fichier et non à un répertoire"); 
		}
		else{
			File[] subfiles = directorySource.listFiles(); 
			//System.out.println("Le répertoire '"+directoryPathSource+"' contient "+ subfiles.length+" fichier"+(subfiles.length>1?"s":"")); 
			for(int i=0 ; i<subfiles.length; i++){ 
				saveName.add(newFolderString+"\\"+subfiles[i].getName());
				final File file = new File(saveName.get(i));
			    try {
			        file.createNewFile();
			    } 
			    catch (Exception e) {
			        System.out.println("Impossible de creer le fichier");
			    }
			    CopyFile(new File(directoryPathSource+"\\"+subfiles[i].getName()), file);
			    file.set
			}
		} */
		
		File directoryDestination = new File(b2);
        directoryDestination.mkdir();
        
		List<String> saveName = new ArrayList<String>();
		File directorySource = new File(directoryPathSource); 
		if(!directorySource.exists()){
			System.out.println("Le fichier/répertoire '"+directoryPathSource+"' n'existe pas"); 
		}
		else if(!directorySource.isDirectory()){ 
			System.out.println("Le chemin '"+directoryPathSource+"' correspond à un fichier et non à un répertoire"); 
		} 
		if(!directoryDestination.exists()){
			System.out.println("Le fichier/répertoire '"+b2+"' n'existe pas"); 
		}
		else if(!directoryDestination.isDirectory()){ 
			System.out.println("Le chemin '"+b2+"' correspond à un fichier et non à un répertoire"); 
		}
		else{
			File[] subfiles = directorySource.listFiles(); 
			//System.out.println("Le répertoire '"+directoryPathSource+"' contient "+ subfiles.length+" fichier"+(subfiles.length>1?"s":"")); 
			for(int i=0 ; i<subfiles.length; i++){ 
				saveName.add(b2+"\\"+subfiles[i].getName());
				final File file = new File(saveName.get(i));
			    try {
			        file.createNewFile();
			    } 
			    catch (Exception e) {
			        System.out.println("Impossible de creer le fichier");
			    }
			    CopyFile(new File(directoryPathSource+"\\"+subfiles[i].getName()), file);
			    //file.setWritable(false);
			    if(i==0) {
			    	FileOutputStream fileDestination = new FileOutputStream(file);
			    }
			}
		} 
	}
}