package json;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import placer.*;

import javax.swing.SwingUtilities;

public class DisplayMapping {
	
	public List<ProcessingElement> listProcessingElementUsed(Mapping mapping){
		List<ProcessingElement> processingElements = ((Global)((MainPlacerOut)mapping.eContainer()).eContainer()).getProcessingElements();
		List<TaskMapping> taskMappings = mapping.getTaskMappings();
		List<ProcessingElement> processingElementsUsed = new ArrayList<ProcessingElement>();
		System.out.println("tfcyvubio");
		for(ProcessingElement processingElement : processingElements) {
			System.out.println("uiuo");
			for(TaskMapping taskMapping : taskMappings) {
				System.out.println("ertyuio");
				if(processingElement.equals(taskMapping.getProcessingElement())) {
					for(int i=0; (i<processingElementsUsed.size() || processingElement.equals(processingElementsUsed.get(i))); i++) {
						System.out.println("7852");
						processingElementsUsed.add(processingElement);
					}
				}
			}
		}
		System.out.println("txciuop");
		return processingElementsUsed;
	}
	
	
	
	
	public List<TaskMapping> listTaskMappingsOrdered(Mapping mapping){
		List<TaskMapping> taskMappings = mapping.getTaskMappings();
		List<TaskMapping> taskMappingsOrdered = new ArrayList<TaskMapping>(taskMappings.size());
		int start = Integer.MAX_VALUE;
		TaskMapping taskMappingCurrent = null;
		//int duration = Integer.MAX_VALUE;
		for(int i=0; i<taskMappingsOrdered.size(); i++) {
			for(TaskMapping taskMappingChoicePosition : taskMappings) {
				if(taskMappingChoicePosition.getStart()<start ) {
					start = taskMappingChoicePosition.getStart();
					taskMappingCurrent = taskMappingChoicePosition;
				}
			}
			taskMappingsOrdered.set(i, taskMappingCurrent);
		}
		return taskMappingsOrdered;
	}
	
	
	
	
	
	
	
	
	
	public void testy(Global global) {
		vzvdzjh(global.getMainPlacerOut1().getMappings().get(0));
	}
	
	
	
	
	
	public void vzvdzjh(Mapping mapping){
		System.out.println("cddscs");
		StringBuilder sequenceDiagramText = new StringBuilder();
		sequenceDiagramText.append("title Mapping - "+mapping.getHardwareName()+"\n");
		List<ProcessingElement> processingElementsUsed = listProcessingElementUsed(mapping);
		/*for(ProcessingElement processingElement : processingElementsUsed) {
			sequenceDiagramText.append("participant "+processingElement.getName()+"\n");
		}*/
		/*List<TaskMapping> taskMappingOrdered = listTaskMappingsOrdered(mapping);
		for(TaskMapping taskMapping : taskMappingOrdered) {
			System.out.println(taskMapping.getStart());
		}*/
		System.out.println(sequenceDiagramText.toString());
		
		
		/*
		
		
		
		Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
	    c.setContents(new StringSelection("hi there"), null);
	    try {
			System.out.println(c.getData(DataFlavor.stringFlavor));
		} catch (UnsupportedFlavorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		/*try {
			Desktop.getDesktop().browse(new URI("https://sequencediagram.org"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	*/
		
		//here
		
		/*Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
		System.out.println(focusOwner);
		if (focusOwner != null) {
	           Window w = SwingUtilities.getWindowAncestor(focusOwner);
	           if (w != null) {
	               System.out.println("b");
	           } else {
	               for( Frame f : Frame.getFrames() ) {
	                   if( "NbMainWindow".equals(f.getName())) { //NOI18N
	                       System.out.println("a");
	                   }
	               }
	           }
	       }*/
		
			
		

	    /*try {
			Robot robot = new Robot();
			for(int i=0; i<10; i++) {
				robot.delay(100);
				robot.keyPress(KeyEvent.VK_TAB);
				robot.delay(100);
				robot.keyRelease(KeyEvent.VK_TAB);
				robot.delay(100);
			}
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_A);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_A);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.delay(100);
			 
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_V);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_V);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.delay(100);
			    
			    
			    
			robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);
			robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);
			robot.delay(100);
			robot.keyPress(KeyEvent.VK_TAB);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_TAB);
			robot.delay(100);
			robot.keyPress(KeyEvent.VK_ENTER);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_ENTER);
			robot.delay(100);
			/*robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_W);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_W);
			robot.keyRelease(KeyEvent.VK_CONTROL);	
			    
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
        
       /* File destinationTXT = new File("C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community"
	    		+ "\\saveRuntimePlacerSample\\testae.txt"); 
        if(destinationTXT.exists()) {
        	destinationTXT.delete();
        }
        try {
			destinationTXT.createNewFile();
			FileWriter writer = new FileWriter(destinationTXT);
			try {
				writer.write((String)c.getData(DataFlavor.stringFlavor));
			} finally {
				writer.close();
			}
		} catch (Exception e) {
			System.out.println("Impossible to create the file");
		}
        
	    File source = new File("C:\\Users\\Utilisateur\\Downloads\\test.txt"); 
	    System.out.println(source.exists());
	    File destinationPNG = new File("C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community"
	    		+ "\\saveRuntimePlacerSample\\testa.txt"); 
	    if(destinationPNG.exists() && source.exists()) {
	    	destinationPNG.delete();
	    	System.out.println("Error, do not find the file");
	    }
	    boolean resultat = source.renameTo(destinationPNG);
	    System.out.println(resultat);
	    /*
	    File displayDiagramSequenceFile = new File("C:\\Users\\Utilisateur\\Desktop\\ObeoDesigner-Community\\"
	    		+ "saveRuntimePlacerSample\\testa.txt");
		Desktop desktop = Desktop.getDesktop();
        if(displayDiagramSequenceFile.exists()) {
        	try {
				desktop.open(displayDiagramSequenceFile);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
	    c.setContents(new StringSelection(""), null);*/
	}

}
