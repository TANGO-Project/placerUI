package json;

import java.awt.AWTException;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.KeyboardFocusManager;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;

import placer.Global;
import placer.MainPlacerOut;
import placer.Mapping;
import placer.ProcessingElement;
import placer.TaskMapping;
import placer.TransmissionMapping;

public class DisplayMapping {
	
	public List<ProcessingElement> listProcessingElementUsed(Mapping mapping){
		List<ProcessingElement> processingElements = ((Global)((MainPlacerOut)mapping.eContainer()).eContainer()).getProcessingElements();
		List<TaskMapping> taskMappings = mapping.getTaskMappings();
		List<ProcessingElement> processingElementsUsed = new ArrayList<ProcessingElement>();
		for(ProcessingElement processingElement : processingElements) {
			for(TaskMapping taskMapping : taskMappings) {
				if(processingElement.equals(taskMapping.getProcessingElement())) {
					if(!processingElementsUsed.contains(processingElement)) {
						processingElementsUsed.add(processingElement);
					}
				}
			}
		}
		return processingElementsUsed;
	}
	
	public List<TaskMapping> listTaskMappingsOrdered(Mapping mapping){
		List<TaskMapping> taskMappings = mapping.getTaskMappings();
		List<TaskMapping> taskMappingsOrdered = new ArrayList<TaskMapping>();
		int start = Integer.MAX_VALUE;
		int duration = Integer.MAX_VALUE;
		TaskMapping taskMappingCurrent = null;
		for(int i=0; i<taskMappings.size(); i++) {
			start = Integer.MAX_VALUE;
			duration = Integer.MAX_VALUE;
			for(TaskMapping taskMappingChoicePosition : taskMappings) {
				if(!taskMappingsOrdered.contains(taskMappingChoicePosition)) {
					if(taskMappingChoicePosition.getStart()<start) {
						start = taskMappingChoicePosition.getStart();
						duration = taskMappingChoicePosition.getDuration();
						taskMappingCurrent = taskMappingChoicePosition;
					}
					else if(taskMappingChoicePosition.getStart()==start && duration>taskMappingChoicePosition.getDuration()) {
						duration = taskMappingChoicePosition.getDuration();
						taskMappingCurrent = taskMappingChoicePosition;
					}
				}
			}
			taskMappingsOrdered.add(taskMappingCurrent);
		}
		return taskMappingsOrdered;
	}
	
	public List<TransmissionMapping> listTransmissionMappingsOrdered(Mapping mapping){
		List<TransmissionMapping> transmissionMappings = mapping.getTransmissionMappings();
		List<TransmissionMapping> transmissionMappingsOrdered = new ArrayList<TransmissionMapping>();
		int start = Integer.MAX_VALUE;
		int duration = Integer.MAX_VALUE;
		TransmissionMapping transmissionMappingCurrent = null;
		for(int i=0; i<transmissionMappings.size(); i++) {
			start = Integer.MAX_VALUE;
			duration = Integer.MAX_VALUE;
			for(TransmissionMapping transmissionMappingChoicePosition : transmissionMappings) {
				if(!transmissionMappingsOrdered.contains(transmissionMappingChoicePosition)) {
					if(transmissionMappingChoicePosition.getStart()<start) {
						start = transmissionMappingChoicePosition.getStart();
						duration = transmissionMappingChoicePosition.getDuration();
						transmissionMappingCurrent = transmissionMappingChoicePosition;
					}
					else if(transmissionMappingChoicePosition.getStart()==start && duration>transmissionMappingChoicePosition.getDuration()) {
						duration = transmissionMappingChoicePosition.getDuration();
						transmissionMappingCurrent = transmissionMappingChoicePosition;
					}
				}
			}
			transmissionMappingsOrdered.add(transmissionMappingCurrent);
		}
		return transmissionMappingsOrdered;
	}
	
	public List<EObject> sortForCreation(List<TaskMapping> taskMappings, List<TransmissionMapping> transmissionMappings){
		List<EObject> listCreationMapping = new ArrayList<EObject>();
		int compteurTask = 0;
		int compteurTranmission = 0;
		for(int i=0; i<(taskMappings.size()+transmissionMappings.size()); i++) {
			if(compteurTask==taskMappings.size()) {
				listCreationMapping.add(transmissionMappings.get(compteurTranmission));
				compteurTranmission++;
			}
			else if(compteurTranmission==transmissionMappings.size()) {
				listCreationMapping.add(taskMappings.get(compteurTask));
				compteurTask++;
			}
			else {
				if(taskMappings.get(compteurTask).getStart()>transmissionMappings.get(compteurTranmission).getStart()) {
					listCreationMapping.add(transmissionMappings.get(compteurTranmission));
					compteurTranmission++;
				}
				else if(taskMappings.get(compteurTask).getStart()<transmissionMappings.get(compteurTranmission).getStart()) {
					listCreationMapping.add(taskMappings.get(compteurTask));
					compteurTask++;
				}
				else {
					if(taskMappings.get(compteurTask).getDuration()>transmissionMappings.get(compteurTranmission).getDuration()) {
						listCreationMapping.add(transmissionMappings.get(compteurTranmission));
						compteurTranmission++;
					}
					else if(taskMappings.get(compteurTask).getDuration()<transmissionMappings.get(compteurTranmission).getDuration()) {
						listCreationMapping.add(taskMappings.get(compteurTask));
						compteurTask++;
					}
					else {
						listCreationMapping.add(taskMappings.get(compteurTask));
						compteurTask++;
					}
				}
			}
		}
		return listCreationMapping;
	}
	
	public void creationPNGMapping(Mapping mapping) {
		StringBuilder sequenceDiagramText = new StringBuilder();
		sequenceDiagramText.append("title Mapping-"+mapping.getHardwareName()+"\n\n");
		List<ProcessingElement> processingElementsUsed = listProcessingElementUsed(mapping);
		for(ProcessingElement processingElement : processingElementsUsed) {
			sequenceDiagramText.append("participant "+processingElement.getName()+"\n");
		}
		sequenceDiagramText.append("\n");
		List<EObject> objects = sortForCreation(listTaskMappingsOrdered(mapping), listTransmissionMappingsOrdered(mapping));
		for(EObject eObject : objects) {
			if(eObject.eClass().getName().equals("TaskMapping")) {
				sequenceDiagramText.append("box over "+((TaskMapping)eObject).getProcessingElement().getName()
				+" :  task : "+((TaskMapping)eObject).getTask()+"\\n implementation : "+((TaskMapping)eObject).getImplementation().getName()
				+"\\n start : "+((TaskMapping)eObject).getStart()+"\\n duration : "+((TaskMapping)eObject).getDuration()
				+"\\n end : "+((TaskMapping)eObject).getEnd()+"\\n\n\n");
			}
			else {
				sequenceDiagramText.append(((TransmissionMapping)eObject).getFromPE().getName()+"->"+((TransmissionMapping)eObject).getToPE().getName()
				+" :  transmission : "+((TransmissionMapping)eObject).getTransmission()+"\\n bus : "+((TransmissionMapping)eObject).getBus().getName()
				+"\\n start : "+((TransmissionMapping)eObject).getStart()+"\\n duration : "+((TransmissionMapping)eObject).getDuration()
				+"\\n end : "+((TransmissionMapping)eObject).getEnd()+"\\n\n\n");
			}
		}
		sequenceDiagramText.replace(sequenceDiagramText.length() - 2, sequenceDiagramText.length(), "\n");
		
		Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
	    c.setContents(new StringSelection(sequenceDiagramText.toString()), null);
	    
	    //Runtime.getRuntime().exec( new String[] { "cmd", "/c", "start", "SequenceDiagram\\index.html", "SequenceDiagram\\index.html" } );
	    
		try {
			Desktop.getDesktop().open(new File("SequenceDiagram\\index.html"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//detection of the number of internet window and put the window with SequenceDiagram.org in focus(not done)
		String process;
		Process p;
		try {
			p = Runtime.getRuntime().exec("tasklist");
			BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			while((process = input.readLine())!= null) {
				//System.out.println(process);
			}
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
	  try {
			Robot robot = new Robot();
			robot.delay(2000);
			for(int i=0; i<8; i++) {
				robot.delay(100);
				robot.keyPress(KeyEvent.VK_TAB);
				robot.delay(100);
				robot.keyRelease(KeyEvent.VK_TAB);
				robot.delay(100);
			}
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_A);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_A);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.delay(100);
			 
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_V);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_V);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.delay(100);
			    
			robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);
			robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);
			robot.delay(100);
			robot.keyPress(KeyEvent.VK_TAB);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_TAB);
			robot.delay(100);
			robot.keyPress(KeyEvent.VK_ENTER);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_ENTER);
			robot.delay(100);
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_W);
			robot.delay(100);
			robot.keyRelease(KeyEvent.VK_W);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			   
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
	    File destinationTXT = new File("saveRuntimePlacerSample\\testae.txt"); 
        if(destinationTXT.exists()) {
        	destinationTXT.delete();
        }
        try {
			destinationTXT.createNewFile();
			FileWriter writer = new FileWriter(destinationTXT);
			try {
				writer.write((String)c.getData(DataFlavor.stringFlavor));
			} finally {
				writer.close();
			}
		} catch (Exception e) {
			System.out.println("Impossible to create the file");
		}
        
        //test
        /*File az = new File("saveRuntimePlacerSample");
        System.out.println(az.list()[az.list().length-1]);*/
        
	  	//faux 
        File source = new File(new File(new File("").getAbsolutePath()).getParentFile().getParent()+"\\Downloads\\"+mapping.getHardwareName()+".png");
	    //File source = new File("C:\\Users\\Utilisateur\\Downloads\\"+mapping.getHardwareName()+".png"); 
	   /* System.out.println(source.exists());
	    File destinationPNG = new File("saveRuntimePlacerSample\\testa.png"); 
	    if(destinationPNG.exists() && source.exists()) {
	    	destinationPNG.delete();
	    	System.out.println("Error, do not find the file");
	    }
	    boolean resultat = source.renameTo(destinationPNG);
	    System.out.println(resultat);
	    
	    File displayDiagramSequenceFile = new File("saveRuntimePlacerSample\\testa.txt");
		Desktop desktop = Desktop.getDesktop();
        if(displayDiagramSequenceFile.exists()) {
        	try {
				desktop.open(displayDiagramSequenceFile);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }*/
	    c.setContents(new StringSelection(""), null);
	}
}