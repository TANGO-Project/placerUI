/**
 */
package placer.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import placer.util.PlacerAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PlacerItemProviderAdapterFactory extends PlacerAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PlacerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Transmission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransmissionItemProvider transmissionItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Transmission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransmissionAdapter() {
		if (transmissionItemProvider == null) {
			transmissionItemProvider = new TransmissionItemProvider(this);
		}

		return transmissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.MultiTaskPermanentTasks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiTaskPermanentTasksItemProvider multiTaskPermanentTasksItemProvider;

	/**
	 * This creates an adapter for a {@link placer.MultiTaskPermanentTasks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiTaskPermanentTasksAdapter() {
		if (multiTaskPermanentTasksItemProvider == null) {
			multiTaskPermanentTasksItemProvider = new MultiTaskPermanentTasksItemProvider(this);
		}

		return multiTaskPermanentTasksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.SwitchingTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchingTaskItemProvider switchingTaskItemProvider;

	/**
	 * This creates an adapter for a {@link placer.SwitchingTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchingTaskAdapter() {
		if (switchingTaskItemProvider == null) {
			switchingTaskItemProvider = new SwitchingTaskItemProvider(this);
		}

		return switchingTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Bus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusItemProvider busItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Bus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusAdapter() {
		if (busItemProvider == null) {
			busItemProvider = new BusItemProvider(this);
		}

		return busItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.ProcessingElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingElementItemProvider processingElementItemProvider;

	/**
	 * This creates an adapter for a {@link placer.ProcessingElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessingElementAdapter() {
		if (processingElementItemProvider == null) {
			processingElementItemProvider = new ProcessingElementItemProvider(this);
		}

		return processingElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Implementation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplementationItemProvider implementationItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Implementation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplementationAdapter() {
		if (implementationItemProvider == null) {
			implementationItemProvider = new ImplementationItemProvider(this);
		}

		return implementationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Connection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionItemProvider connectionItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Connection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionAdapter() {
		if (connectionItemProvider == null) {
			connectionItemProvider = new ConnectionItemProvider(this);
		}

		return connectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.SamePE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SamePEItemProvider samePEItemProvider;

	/**
	 * This creates an adapter for a {@link placer.SamePE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSamePEAdapter() {
		if (samePEItemProvider == null) {
			samePEItemProvider = new SamePEItemProvider(this);
		}

		return samePEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.EnergyCap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnergyCapItemProvider energyCapItemProvider;

	/**
	 * This creates an adapter for a {@link placer.EnergyCap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnergyCapAdapter() {
		if (energyCapItemProvider == null) {
			energyCapItemProvider = new EnergyCapItemProvider(this);
		}

		return energyCapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.RunOn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunOnItemProvider runOnItemProvider;

	/**
	 * This creates an adapter for a {@link placer.RunOn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunOnAdapter() {
		if (runOnItemProvider == null) {
			runOnItemProvider = new RunOnItemProvider(this);
		}

		return runOnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.PowerCap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerCapItemProvider powerCapItemProvider;

	/**
	 * This creates an adapter for a {@link placer.PowerCap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerCapAdapter() {
		if (powerCapItemProvider == null) {
			powerCapItemProvider = new PowerCapItemProvider(this);
		}

		return powerCapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.SymetricPE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymetricPEItemProvider symetricPEItemProvider;

	/**
	 * This creates an adapter for a {@link placer.SymetricPE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymetricPEAdapter() {
		if (symetricPEItemProvider == null) {
			symetricPEItemProvider = new SymetricPEItemProvider(this);
		}

		return symetricPEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.MustBeUsed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MustBeUsedItemProvider mustBeUsedItemProvider;

	/**
	 * This creates an adapter for a {@link placer.MustBeUsed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMustBeUsedAdapter() {
		if (mustBeUsedItemProvider == null) {
			mustBeUsedItemProvider = new MustBeUsedItemProvider(this);
		}

		return mustBeUsedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.GlobalInformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalInformationItemProvider globalInformationItemProvider;

	/**
	 * This creates an adapter for a {@link placer.GlobalInformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalInformationAdapter() {
		if (globalInformationItemProvider == null) {
			globalInformationItemProvider = new GlobalInformationItemProvider(this);
		}

		return globalInformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.MultiObjectiveGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiObjectiveGoalItemProvider multiObjectiveGoalItemProvider;

	/**
	 * This creates an adapter for a {@link placer.MultiObjectiveGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiObjectiveGoalAdapter() {
		if (multiObjectiveGoalItemProvider == null) {
			multiObjectiveGoalItemProvider = new MultiObjectiveGoalItemProvider(this);
		}

		return multiObjectiveGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.SimpleObjectiveGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleObjectiveGoalItemProvider simpleObjectiveGoalItemProvider;

	/**
	 * This creates an adapter for a {@link placer.SimpleObjectiveGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleObjectiveGoalAdapter() {
		if (simpleObjectiveGoalItemProvider == null) {
			simpleObjectiveGoalItemProvider = new SimpleObjectiveGoalItemProvider(this);
		}

		return simpleObjectiveGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.TaskGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskGroupItemProvider taskGroupItemProvider;

	/**
	 * This creates an adapter for a {@link placer.TaskGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskGroupAdapter() {
		if (taskGroupItemProvider == null) {
			taskGroupItemProvider = new TaskGroupItemProvider(this);
		}

		return taskGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Global} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalItemProvider globalItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Global}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalAdapter() {
		if (globalItemProvider == null) {
			globalItemProvider = new GlobalItemProvider(this);
		}

		return globalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.MaxMakeSpan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxMakeSpanItemProvider maxMakeSpanItemProvider;

	/**
	 * This creates an adapter for a {@link placer.MaxMakeSpan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxMakeSpanAdapter() {
		if (maxMakeSpanItemProvider == null) {
			maxMakeSpanItemProvider = new MaxMakeSpanItemProvider(this);
		}

		return maxMakeSpanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.ResourcesDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcesDeclarationItemProvider resourcesDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link placer.ResourcesDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcesDeclarationAdapter() {
		if (resourcesDeclarationItemProvider == null) {
			resourcesDeclarationItemProvider = new ResourcesDeclarationItemProvider(this);
		}

		return resourcesDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.PropertiesDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesDeclarationItemProvider propertiesDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link placer.PropertiesDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesDeclarationAdapter() {
		if (propertiesDeclarationItemProvider == null) {
			propertiesDeclarationItemProvider = new PropertiesDeclarationItemProvider(this);
		}

		return propertiesDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.Parameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametersItemProvider parametersItemProvider;

	/**
	 * This creates an adapter for a {@link placer.Parameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametersAdapter() {
		if (parametersItemProvider == null) {
			parametersItemProvider = new ParametersItemProvider(this);
		}

		return parametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.ResourcesDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcesDefinitionItemProvider resourcesDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link placer.ResourcesDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcesDefinitionAdapter() {
		if (resourcesDefinitionItemProvider == null) {
			resourcesDefinitionItemProvider = new ResourcesDefinitionItemProvider(this);
		}

		return resourcesDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.PropertiesDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertiesDefinitionItemProvider propertiesDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link placer.PropertiesDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertiesDefinitionAdapter() {
		if (propertiesDefinitionItemProvider == null) {
			propertiesDefinitionItemProvider = new PropertiesDefinitionItemProvider(this);
		}

		return propertiesDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.ResourcesUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcesUsageItemProvider resourcesUsageItemProvider;

	/**
	 * This creates an adapter for a {@link placer.ResourcesUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcesUsageAdapter() {
		if (resourcesUsageItemProvider == null) {
			resourcesUsageItemProvider = new ResourcesUsageItemProvider(this);
		}

		return resourcesUsageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.GlobalProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalPropertiesItemProvider globalPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link placer.GlobalProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalPropertiesAdapter() {
		if (globalPropertiesItemProvider == null) {
			globalPropertiesItemProvider = new GlobalPropertiesItemProvider(this);
		}

		return globalPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.TaskMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskMappingItemProvider taskMappingItemProvider;

	/**
	 * This creates an adapter for a {@link placer.TaskMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskMappingAdapter() {
		if (taskMappingItemProvider == null) {
			taskMappingItemProvider = new TaskMappingItemProvider(this);
		}

		return taskMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.SharedFunctionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedFunctionMappingItemProvider sharedFunctionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link placer.SharedFunctionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedFunctionMappingAdapter() {
		if (sharedFunctionMappingItemProvider == null) {
			sharedFunctionMappingItemProvider = new SharedFunctionMappingItemProvider(this);
		}

		return sharedFunctionMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.NameValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameValueItemProvider nameValueItemProvider;

	/**
	 * This creates an adapter for a {@link placer.NameValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameValueAdapter() {
		if (nameValueItemProvider == null) {
			nameValueItemProvider = new NameValueItemProvider(this);
		}

		return nameValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.MainPlacerOut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainPlacerOutItemProvider mainPlacerOutItemProvider;

	/**
	 * This creates an adapter for a {@link placer.MainPlacerOut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainPlacerOutAdapter() {
		if (mainPlacerOutItemProvider == null) {
			mainPlacerOutItemProvider = new MainPlacerOutItemProvider(this);
		}

		return mainPlacerOutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link placer.TransmissionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransmissionMappingItemProvider transmissionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link placer.TransmissionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransmissionMappingAdapter() {
		if (transmissionMappingItemProvider == null) {
			transmissionMappingItemProvider = new TransmissionMappingItemProvider(this);
		}

		return transmissionMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (taskItemProvider != null)
			taskItemProvider.dispose();
		if (transmissionItemProvider != null)
			transmissionItemProvider.dispose();
		if (multiTaskPermanentTasksItemProvider != null)
			multiTaskPermanentTasksItemProvider.dispose();
		if (switchingTaskItemProvider != null)
			switchingTaskItemProvider.dispose();
		if (busItemProvider != null)
			busItemProvider.dispose();
		if (processingElementItemProvider != null)
			processingElementItemProvider.dispose();
		if (implementationItemProvider != null)
			implementationItemProvider.dispose();
		if (connectionItemProvider != null)
			connectionItemProvider.dispose();
		if (samePEItemProvider != null)
			samePEItemProvider.dispose();
		if (energyCapItemProvider != null)
			energyCapItemProvider.dispose();
		if (runOnItemProvider != null)
			runOnItemProvider.dispose();
		if (powerCapItemProvider != null)
			powerCapItemProvider.dispose();
		if (symetricPEItemProvider != null)
			symetricPEItemProvider.dispose();
		if (mustBeUsedItemProvider != null)
			mustBeUsedItemProvider.dispose();
		if (globalInformationItemProvider != null)
			globalInformationItemProvider.dispose();
		if (multiObjectiveGoalItemProvider != null)
			multiObjectiveGoalItemProvider.dispose();
		if (simpleObjectiveGoalItemProvider != null)
			simpleObjectiveGoalItemProvider.dispose();
		if (taskGroupItemProvider != null)
			taskGroupItemProvider.dispose();
		if (globalItemProvider != null)
			globalItemProvider.dispose();
		if (maxMakeSpanItemProvider != null)
			maxMakeSpanItemProvider.dispose();
		if (resourcesDeclarationItemProvider != null)
			resourcesDeclarationItemProvider.dispose();
		if (propertiesDeclarationItemProvider != null)
			propertiesDeclarationItemProvider.dispose();
		if (parametersItemProvider != null)
			parametersItemProvider.dispose();
		if (resourcesDefinitionItemProvider != null)
			resourcesDefinitionItemProvider.dispose();
		if (propertiesDefinitionItemProvider != null)
			propertiesDefinitionItemProvider.dispose();
		if (resourcesUsageItemProvider != null)
			resourcesUsageItemProvider.dispose();
		if (globalPropertiesItemProvider != null)
			globalPropertiesItemProvider.dispose();
		if (taskMappingItemProvider != null)
			taskMappingItemProvider.dispose();
		if (mappingItemProvider != null)
			mappingItemProvider.dispose();
		if (sharedFunctionMappingItemProvider != null)
			sharedFunctionMappingItemProvider.dispose();
		if (nameValueItemProvider != null)
			nameValueItemProvider.dispose();
		if (mainPlacerOutItemProvider != null)
			mainPlacerOutItemProvider.dispose();
		if (transmissionMappingItemProvider != null)
			transmissionMappingItemProvider.dispose();
	}

}
